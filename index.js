require('dotenv').config();
const fs = require("fs");
const { Client, GatewayIntentBits } = require('discord.js');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMessageReactions,
    ]
})

let c·ª•m_t·ª´_tr∆∞·ªõc_ƒë√≥ = '';
let ng∆∞·ªùi_d√πng_tr∆∞·ªõc_ƒë√≥ = '';
let c·ª•m_t·ª´_ƒë√£_d√πng = []
let timeout; // Bi·∫øn l∆∞u tr·ªØ timeout
const THOI_GIAN_CHO = 60000; // Th·ªùi gian ch·ªù (60 gi√¢y)

client.on('messageCreate', async message => {
    if (!message.guild || message.author.bot) return;
    const allowedChannels = ['1356635941174771853', '1356636092127772722'];
    if (!allowedChannels.includes(message.channel.id)) return;

    const n·ªôi_dung = message.content.trim().toLowerCase();
    const t·ª´ = n·ªôi_dung.split(' ');

    if (t·ª´[0] === '!start') {
        try {
            const ids = fs.readFileSync('TuVung.txt', 'utf8').split('\n').filter(line => line.trim() !== '');
            if (ids.length === 0) {
                return await message.reply('T·ª´ ƒëi·ªÉn tr·ªëng, kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu tr√≤ ch∆°i.');
            }

            const t·ª´_ng·∫´u_nhi√™n = ids[Math.floor(Math.random() * ids.length)];
            c·ª•m_t·ª´_tr∆∞·ªõc_ƒë√≥ = t·ª´_ng·∫´u_nhi√™n;
            ng∆∞·ªùi_d√πng_tr∆∞·ªõc_ƒë√≥ = '';
            c·ª•m_t·ª´_ƒë√£_d√πng = [t·ª´_ng·∫´u_nhi√™n];

            await message.reply(`Tr√≤ ch∆°i b·∫Øt ƒë·∫ßu! T·ª´ ƒë·∫ßu ti√™n l√†: \`${t·ª´_ng·∫´u_nhi√™n}\``);
        } catch (error) {
            console.error('L·ªói khi ƒë·ªçc file:', error);
            return await message.reply('ƒê√£ x·∫£y ra l·ªói khi b·∫Øt ƒë·∫ßu tr√≤ ch∆°i.');
        }
    }

    if (t·ª´[0] === '!add') 
    {
        if (t·ª´.length === 3)
        {
            try {
                let ids = fs.readFileSync('TuVung.txt', 'utf8').split('\n');
                const th√™m = `${t·ª´[1]} ${t·ª´[2]}`;
                if (!ids.includes(th√™m)) {
                    ids.push(th√™m);
                    fs.writeFileSync('TuVung.txt', ids.join('\n'));
                    await message.reply(`ƒê√£ th√™m t·ª´: ${th√™m}`);
                } else {
                    return await message.reply(`T·ª´ ${th√™m} ƒë√£ c√≥ trong t·ª´ ƒëi·ªÉn`);
                }
            } catch (error) {
                console.error('L·ªói khi ƒë·ªçc ho·∫∑c ghi file:', error);
                return await message.reply('ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω t·ª´ ƒëi·ªÉn.');
            }
        }
    } 

    if (message.content.toLowerCase() === '!reset') {
        if (process.env.GIOI_HAN_RESET && !process.env.NGUOI_CO_THE_RESET.split(", ").includes(message.author.id)) {
            return message.reply("Ch·ªâ c√≥ Author m·ªõi c√≥ th·ªÉ reset");
        }

        // ƒê·∫∑t l·∫°i tr·∫°ng th√°i tr√≤ ch∆°i
        c·ª•m_t·ª´_tr∆∞·ªõc_ƒë√≥ = '';
        ng∆∞·ªùi_d√πng_tr∆∞·ªõc_ƒë√≥ = '';
        c·ª•m_t·ª´_ƒë√£_d√πng = [];
        await message.reply('ƒê√£ ƒë·∫∑t l·∫°i tr√≤ ch∆°i.');

        // T·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i tr√≤ ch∆°i
        try {
            const ids = fs.readFileSync('TuVung.txt', 'utf8').split('\n').filter(line => line.trim() !== '');
            if (ids.length === 0) {
                return await message.channel.send('T·ª´ ƒëi·ªÉn tr·ªëng, kh√¥ng th·ªÉ kh·ªüi ƒë·ªông l·∫°i tr√≤ ch∆°i.');
            }

            const t·ª´_ng·∫´u_nhi√™n = ids[Math.floor(Math.random() * ids.length)];
            c·ª•m_t·ª´_tr∆∞·ªõc_ƒë√≥ = t·ª´_ng·∫´u_nhi√™n;
            c·ª•m_t·ª´_ƒë√£_d√πng = [t·ª´_ng·∫´u_nhi√™n];

            await message.channel.send(`Tr√≤ ch∆°i m·ªõi b·∫Øt ƒë·∫ßu! T·ª´ ƒë·∫ßu ti√™n l√†: \`${t·ª´_ng·∫´u_nhi√™n}\``);
        } catch (error) {
            console.error('L·ªói khi ƒë·ªçc file:', error);
            await message.channel.send('ƒê√£ x·∫£y ra l·ªói khi kh·ªüi ƒë·ªông l·∫°i tr√≤ ch∆°i.');
        }
    }

    if (t·ª´.length !== 2) return;

    const c·ª•m_t·ª´ = `${t·ª´[0]} ${t·ª´[1]}`;

    if (c·ª•m_t·ª´_ƒë√£_d√πng.includes(c·ª•m_t·ª´))
    {
        await message.react('‚ùå');
        return message.reply(`C·ª•m T·ª´ \`${c·ª•m_t·ª´}\` ƒê√£ ƒê∆∞·ª£c S·ª≠ D·ª•ng.`);
    }

    if (c·ª•m_t·ª´_ƒë√£_d√πng.length >= parseInt(process.env.MAX_WORD, 10))
    {
        c·ª•m_t·ª´_tr∆∞·ªõc_ƒë√≥ = '';
        ng∆∞·ªùi_d√πng_tr∆∞·ªõc_ƒë√≥ = '';
        c·ª•m_t·ª´_ƒë√£_d√πng = [];

        await message.react('‚ùå');
        return message.reply('Gi·ªõi H·∫°n T·ª´ ƒê√£ ƒê·∫°t ƒê·∫øn M·ª©c T·ªëi ƒêa V√† D·ªØ Li·ªáu ƒê√£ ƒê∆∞·ª£c ƒê·∫∑t L·∫°i.');
        
    }

    if (!c·ª•m_t·ª´_tr∆∞·ªõc_ƒë√≥) return x·ª≠_l√Ω_c·ª•m_t·ª´_ƒë·∫ßu_ti√™n(message, c·ª•m_t·ª´);
    else return x·ª≠_l√Ω_c·ª•m_t·ª´_ti·∫øp_theo(message, c·ª•m_t·ª´, t·ª´);
});

const ki·ªÉm_tra_t·ª´_t·ªìn_t·∫°i = require('./ki·ªÉm_tra_t·ª´_t·ªìn_t·∫°i.js');

async function x·ª≠_l√Ω_c·ª•m_t·ª´_ƒë·∫ßu_ti√™n(message, c·ª•m_t·ª´) 
{
    if (!ki·ªÉm_tra_t·ª´_t·ªìn_t·∫°i(c·ª•m_t·ª´)) 
    {
        await message.react('‚ùå');
        return message.reply(`C·ª•m T·ª´ \`${c·ª•m_t·ª´}\` Kh√¥ng T·ªìn T·∫°i Trong T·ª´ ƒêi·ªÉn C·ªßa Bot!`);
    }

    await message.react('‚úÖ');
    c·ª•m_t·ª´_tr∆∞·ªõc_ƒë√≥ = c·ª•m_t·ª´;
    ng∆∞·ªùi_d√πng_tr∆∞·ªõc_ƒë√≥ = message.author.id;
    c·ª•m_t·ª´_ƒë√£_d√πng.push(c·ª•m_t·ª´);

    // ƒê·∫∑t l·∫°i b·ªô ƒë·∫øm th·ªùi gian
    ƒë·∫∑t_l·∫°i_timeout(message);
}

async function x·ª≠_l√Ω_c·ª•m_t·ª´_ti·∫øp_theo(message, c·ª•m_t·ª´, t·ª´) 
{
    if (message.author.id === ng∆∞·ªùi_d√πng_tr∆∞·ªõc_ƒë√≥) 
    {
        await message.react('‚ùå');
        return message.reply('B·∫°n Ch·ªâ ƒê∆∞·ª£c N√≥i M·ªôt L·∫ßn M·ªói L∆∞·ª£t.');
    }

    const t·ª´_th·ª©_hai_tr∆∞·ªõc_ƒë√≥ = c·ª•m_t·ª´_tr∆∞·ªõc_ƒë√≥.split(' ')[1];

    if (t·ª´[0] !== t·ª´_th·ª©_hai_tr∆∞·ªõc_ƒë√≥) 
    {
        await message.react('‚ùå');
        return message.reply(`T·ª´ C·ªßa B·∫°n Ph·∫£i N·ªëi Ti·∫øp T·ª´ \`${t·ª´_th·ª©_hai_tr∆∞·ªõc_ƒë√≥}\``);
    }

    if (!ki·ªÉm_tra_t·ª´_t·ªìn_t·∫°i(c·ª•m_t·ª´)) 
    {
        await message.react('‚ùå');
        return message.reply(`C·ª•m T·ª´ \`${c·ª•m_t·ª´}\` Kh√¥ng H·ª£p L·ªá!`);
    }

    await message.react('‚úÖ');
    c·ª•m_t·ª´_tr∆∞·ªõc_ƒë√≥ = c·ª•m_t·ª´;
    ng∆∞·ªùi_d√πng_tr∆∞·ªõc_ƒë√≥ = message.author.id;
    c·ª•m_t·ª´_ƒë√£_d√πng.push(c·ª•m_t·ª´);

    // ƒê·∫∑t l·∫°i b·ªô ƒë·∫øm th·ªùi gian
    ƒë·∫∑t_l·∫°i_timeout(message);
}

function ƒë·∫∑t_l·∫°i_timeout(message) {
    if (timeout) clearTimeout(timeout); // X√≥a timeout c≈© n·∫øu c√≥

    timeout = setTimeout(async () => {
        if (ng∆∞·ªùi_d√πng_tr∆∞·ªõc_ƒë√≥) {
            // Th√¥ng b√°o ng∆∞·ªùi chi·∫øn th·∫Øng
            await message.channel.send(`‚è∞ Kh√¥ng c√≥ ai tr·∫£ l·ªùi trong th·ªùi gian d√†i. Ng∆∞·ªùi chi·∫øn th·∫Øng l√† <@${ng∆∞·ªùi_d√πng_tr∆∞·ªõc_ƒë√≥}>! üéâ`);
        } else {
            // Kh√¥ng c√≥ ai tham gia
            await message.channel.send('‚è∞ Kh√¥ng c√≥ ai tham gia tr√≤ ch∆°i. Tr√≤ ch∆°i k·∫øt th√∫c.');
        }

        // ƒê·∫∑t l·∫°i tr·∫°ng th√°i tr√≤ ch∆°i
        c·ª•m_t·ª´_tr∆∞·ªõc_ƒë√≥ = '';
        ng∆∞·ªùi_d√πng_tr∆∞·ªõc_ƒë√≥ = '';
        c·ª•m_t·ª´_ƒë√£_d√πng = [];

        // T·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i tr√≤ ch∆°i
        try {
            const ids = fs.readFileSync('TuVung.txt', 'utf8').split('\n').filter(line => line.trim() !== '');
            if (ids.length === 0) {
                return await message.channel.send('T·ª´ ƒëi·ªÉn tr·ªëng, kh√¥ng th·ªÉ kh·ªüi ƒë·ªông l·∫°i tr√≤ ch∆°i.');
            }

            const t·ª´_ng·∫´u_nhi√™n = ids[Math.floor(Math.random() * ids.length)];
            c·ª•m_t·ª´_tr∆∞·ªõc_ƒë√≥ = t·ª´_ng·∫´u_nhi√™n;
            c·ª•m_t·ª´_ƒë√£_d√πng = [t·ª´_ng·∫´u_nhi√™n];

            await message.channel.send(`Tr√≤ ch∆°i m·ªõi b·∫Øt ƒë·∫ßu! T·ª´ ƒë·∫ßu ti√™n l√†: \`${t·ª´_ng·∫´u_nhi√™n}\``);
        } catch (error) {
            console.error('L·ªói khi ƒë·ªçc file:', error);
            await message.channel.send('ƒê√£ x·∫£y ra l·ªói khi kh·ªüi ƒë·ªông l·∫°i tr√≤ ch∆°i.');
        }
    }, THOI_GIAN_CHO);
}

client.on('ready', () => {
    console.log(`${client.user.tag} ƒë√£ ho·∫°t ƒë·ªông`);
    console.log('Token:', process.env.TOKEN);
});
client.login(process.env.TOKEN);